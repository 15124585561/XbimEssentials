// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Interfaces;
using System.Collections.Generic;
using System.Linq;

// ReSharper disable once CheckNamespace
namespace Xbim.Ifc2x3.StructuralLoadResource
{
	public partial class @IfcStructuralLoadLinearForce : IIfcStructuralLoadLinearForce
	{
		Ifc4.MeasureResource.IfcLinearForceMeasure? IIfcStructuralLoadLinearForce.LinearForceX 
		{ 
			get
			{
				if (LinearForceX == null) return null;
				return new Ifc4.MeasureResource.IfcLinearForceMeasure((double)LinearForceX);
			} 
		}
		Ifc4.MeasureResource.IfcLinearForceMeasure? IIfcStructuralLoadLinearForce.LinearForceY 
		{ 
			get
			{
				if (LinearForceY == null) return null;
				return new Ifc4.MeasureResource.IfcLinearForceMeasure((double)LinearForceY);
			} 
		}
		Ifc4.MeasureResource.IfcLinearForceMeasure? IIfcStructuralLoadLinearForce.LinearForceZ 
		{ 
			get
			{
				if (LinearForceZ == null) return null;
				return new Ifc4.MeasureResource.IfcLinearForceMeasure((double)LinearForceZ);
			} 
		}
		Ifc4.MeasureResource.IfcLinearMomentMeasure? IIfcStructuralLoadLinearForce.LinearMomentX 
		{ 
			get
			{
				if (LinearMomentX == null) return null;
				return new Ifc4.MeasureResource.IfcLinearMomentMeasure((double)LinearMomentX);
			} 
		}
		Ifc4.MeasureResource.IfcLinearMomentMeasure? IIfcStructuralLoadLinearForce.LinearMomentY 
		{ 
			get
			{
				if (LinearMomentY == null) return null;
				return new Ifc4.MeasureResource.IfcLinearMomentMeasure((double)LinearMomentY);
			} 
		}
		Ifc4.MeasureResource.IfcLinearMomentMeasure? IIfcStructuralLoadLinearForce.LinearMomentZ 
		{ 
			get
			{
				if (LinearMomentZ == null) return null;
				return new Ifc4.MeasureResource.IfcLinearMomentMeasure((double)LinearMomentZ);
			} 
		}
	}
}