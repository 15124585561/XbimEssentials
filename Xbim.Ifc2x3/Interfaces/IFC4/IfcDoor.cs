// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Interfaces;
using System.Collections.Generic;
using System.Linq;

// ReSharper disable once CheckNamespace
namespace Xbim.Ifc2x3.SharedBldgElements
{
	public partial class @IfcDoor : IIfcDoor
	{
		Ifc4.MeasureResource.IfcPositiveLengthMeasure? IIfcDoor.OverallHeight 
		{ 
			get
			{
				if (!OverallHeight.HasValue) return null;
				return new Ifc4.MeasureResource.IfcPositiveLengthMeasure(OverallHeight.Value);
			} 
		}
		Ifc4.MeasureResource.IfcPositiveLengthMeasure? IIfcDoor.OverallWidth 
		{ 
			get
			{
				if (!OverallWidth.HasValue) return null;
				return new Ifc4.MeasureResource.IfcPositiveLengthMeasure(OverallWidth.Value);
			} 
		}
		Ifc4.Interfaces.IfcDoorTypeEnum? IIfcDoor.PredefinedType 
		{ 
			get
			{
				//## Handle return of PredefinedType for which no match was found
			    return null;
			    //##
			} 
		}
		Ifc4.Interfaces.IfcDoorTypeOperationEnum? IIfcDoor.OperationType 
		{ 
			get
			{
				//## Handle return of OperationType for which no match was found
			    return null;
			    //##
			} 
		}
		Ifc4.MeasureResource.IfcLabel? IIfcDoor.UserDefinedOperationType 
		{ 
			get
			{
				//## Handle return of UserDefinedOperationType for which no match was found
			    return null;
			    //##
			} 
		}
        /// <summary>
        /// Returns the Reference ID for this specified type in this project (e.g. type 'A-1'), if known
        /// </summary>
        /// <param name="door"></param>
        /// <returns></returns>
        public Ifc4.MeasureResource.IfcIdentifier? Reference
        {
            get
            {
                var val = GetPropertySingleNominalValue("Pset_DoorCommon", "Reference ");
                if (val != null && val is Ifc4.MeasureResource.IfcIdentifier)
                    return (Ifc4.MeasureResource.IfcIdentifier)val;
                else
                    return null;
            }
        }


        /// <summary>
        /// Returns if the door is external
        /// </summary>
        /// <param name="door"></param>
        /// <returns></returns>
        public Ifc4.MeasureResource.IfcBoolean? IsExternal
        {
            get
            {
                var val = GetPropertySingleNominalValue("Pset_DoorCommon", "IsExternal");
                if (val != null && val is Ifc4.MeasureResource.IfcBoolean)
                    return (Ifc4.MeasureResource.IfcBoolean)val;
                else
                    return null; //default is to return false
            }
        }
        /// <summary>
        /// Returns whether the door is a Fire Exit or not, null if not known
        /// </summary>
        /// <param name="door"></param>
        /// <returns></returns>
        public Ifc4.MeasureResource.IfcBoolean? FireExit
        {
            get
            {
                var val = GetPropertySingleNominalValue("Pset_DoorCommon", "FireExit ");
                if (val != null && val is Ifc4.MeasureResource.IfcBoolean)
                    return (Ifc4.MeasureResource.IfcBoolean)val;
                else
                    return null;
            }
        }

        /// <summary>
        /// Returns the fire rating if defined
        /// </summary>
        /// <param name="door"></param>
        /// <returns></returns>
        public  Ifc4.MeasureResource.IfcLabel? FireRating
        {
            get
            {
                var val = GetPropertySingleNominalValue("Pset_DoorCommon", "FireRating ");
                if (val != null && val is Ifc4.MeasureResource.IfcLabel)
                    return (Ifc4.MeasureResource.IfcLabel)val;
                else
                    return null;
            }
        }
	//## Custom code
	//##
	}
}