// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Interfaces;
using System.Collections.Generic;
using System.Linq;

// ReSharper disable once CheckNamespace
namespace Xbim.Ifc2x3.StructuralAnalysisDomain
{
	public partial class @IfcStructuralCurveMember : IIfcStructuralCurveMember
	{
		Ifc4.Interfaces.IfcStructuralCurveMemberTypeEnum IIfcStructuralCurveMember.PredefinedType 
		{ 
			get
			{
				switch (PredefinedType)
				{
					case IfcStructuralCurveTypeEnum.RIGID_JOINED_MEMBER:
						return Ifc4.Interfaces.IfcStructuralCurveMemberTypeEnum.RIGID_JOINED_MEMBER;
					
					case IfcStructuralCurveTypeEnum.PIN_JOINED_MEMBER:
						return Ifc4.Interfaces.IfcStructuralCurveMemberTypeEnum.PIN_JOINED_MEMBER;
					
					case IfcStructuralCurveTypeEnum.CABLE:
						return Ifc4.Interfaces.IfcStructuralCurveMemberTypeEnum.CABLE;
					
					case IfcStructuralCurveTypeEnum.TENSION_MEMBER:
						return Ifc4.Interfaces.IfcStructuralCurveMemberTypeEnum.TENSION_MEMBER;
					
					case IfcStructuralCurveTypeEnum.COMPRESSION_MEMBER:
						return Ifc4.Interfaces.IfcStructuralCurveMemberTypeEnum.COMPRESSION_MEMBER;
					
					case IfcStructuralCurveTypeEnum.USERDEFINED:
						return Ifc4.Interfaces.IfcStructuralCurveMemberTypeEnum.USERDEFINED;
					
					case IfcStructuralCurveTypeEnum.NOTDEFINED:
						return Ifc4.Interfaces.IfcStructuralCurveMemberTypeEnum.NOTDEFINED;
					
					
					default:
						throw new System.ArgumentOutOfRangeException();
				}
			} 
			set
			{
				throw new System.NotImplementedException();
				
			}
		}

		private  IIfcDirection _axis;

		IIfcDirection IIfcStructuralCurveMember.Axis 
		{ 
			get
			{
				return _axis;
			} 
			set
			{
				SetValue(v => _axis = v, _axis, value, "Axis", byte.MaxValue);
				
			}
		}
	//## Custom code
	//##
	}
}