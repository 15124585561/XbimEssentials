// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Interfaces;
using System.Collections.Generic;
using System.Linq;

// ReSharper disable once CheckNamespace
namespace Xbim.Ifc2x3.StructuralLoadResource
{
	public partial class @IfcBoundaryNodeCondition : IIfcBoundaryNodeCondition
	{
		IIfcTranslationalStiffnessSelect IIfcBoundaryNodeCondition.TranslationalStiffnessX 
		{ 
			get
			{
				//## Handle return of TranslationalStiffnessX for which no match was found
                if (_translationalStiffnessX != null)
                    return _translationalStiffnessX;

                var value = LinearStiffnessX;
                if (!value.HasValue) return null;
                return new Ifc4.MeasureResource.IfcLinearStiffnessMeasure(value.Value);
				//##
			} 
			set
			{
				//## Handle setting of TranslationalStiffnessX for which no match was found
                if (value == null)
                {
                    LinearStiffnessX = null;
                    SetValue(v => _translationalStiffnessX = v, _translationalStiffnessX, null, "TranslationalStiffnessByAreaX", byte.MaxValue);
                    return;

                }
                if (value is Ifc4.MeasureResource.IfcLinearStiffnessMeasure)
                {
                    LinearStiffnessX = new MeasureResource.IfcLinearStiffnessMeasure((Ifc4.MeasureResource.IfcLinearStiffnessMeasure)value);
                    SetValue(v => _translationalStiffnessX = v, _translationalStiffnessX, null, "TranslationalStiffnessByAreaX", byte.MaxValue);
                    return;
                }

                SetValue(v => _translationalStiffnessX = v, _translationalStiffnessX, value, "TranslationalStiffnessByAreaX", byte.MaxValue);
                return;
				//##
				NotifyPropertyChanged("TranslationalStiffnessX");
				
			}
		}
		IIfcTranslationalStiffnessSelect IIfcBoundaryNodeCondition.TranslationalStiffnessY 
		{ 
			get
			{
				//## Handle return of TranslationalStiffnessY for which no match was found
                if (_translationalStiffnessY != null)
                    return _translationalStiffnessY;

                var value = LinearStiffnessY;
                if (!value.HasValue) return null;
                return new Ifc4.MeasureResource.IfcLinearStiffnessMeasure(value.Value);
                //##
			} 
			set
			{
				//## Handle setting of TranslationalStiffnessY for which no match was found
                if (value == null)
                {
                    LinearStiffnessY = null;
                    SetValue(v => _translationalStiffnessY = v, _translationalStiffnessY, null, "TranslationalStiffnessByAreaY", byte.MaxValue);
                    return;

                }
                if (value is Ifc4.MeasureResource.IfcLinearStiffnessMeasure)
                {
                    LinearStiffnessY = new MeasureResource.IfcLinearStiffnessMeasure((Ifc4.MeasureResource.IfcLinearStiffnessMeasure)value);
                    SetValue(v => _translationalStiffnessY = v, _translationalStiffnessY, null, "TranslationalStiffnessByAreaY", byte.MaxValue);
                    return;
                }

                SetValue(v => _translationalStiffnessY = v, _translationalStiffnessY, value, "TranslationalStiffnessByAreaY", byte.MaxValue);
                return;
                //##
				NotifyPropertyChanged("TranslationalStiffnessY");
				
			}
		}
		IIfcTranslationalStiffnessSelect IIfcBoundaryNodeCondition.TranslationalStiffnessZ 
		{ 
			get
			{
				//## Handle return of TranslationalStiffnessZ for which no match was found
                if (_translationalStiffnessZ != null)
                    return _translationalStiffnessZ;

                var value = LinearStiffnessZ;
                if (!value.HasValue) return null;
                return new Ifc4.MeasureResource.IfcLinearStiffnessMeasure(value.Value);
                //##
			} 
			set
			{
				//## Handle setting of TranslationalStiffnessZ for which no match was found
                if (value == null)
                {
                    LinearStiffnessZ = null;
                    SetValue(v => _translationalStiffnessZ = v, _translationalStiffnessZ, null, "TranslationalStiffnessByAreaZ", byte.MaxValue);
                    return;

                }
                if (value is Ifc4.MeasureResource.IfcLinearStiffnessMeasure)
                {
                    LinearStiffnessZ = new MeasureResource.IfcLinearStiffnessMeasure((Ifc4.MeasureResource.IfcLinearStiffnessMeasure)value);
                    SetValue(v => _translationalStiffnessZ = v, _translationalStiffnessZ, null, "TranslationalStiffnessByAreaZ", byte.MaxValue);
                    return;
                }

                SetValue(v => _translationalStiffnessZ = v, _translationalStiffnessZ, value, "TranslationalStiffnessByAreaZ", byte.MaxValue);
                return;
                //##
				NotifyPropertyChanged("TranslationalStiffnessZ");
				
			}
		}
		IIfcRotationalStiffnessSelect IIfcBoundaryNodeCondition.RotationalStiffnessX 
		{ 
			get
			{
 
				if(!RotationalStiffnessX.HasValue) return null;
				return new Ifc4.MeasureResource.IfcRotationalStiffnessMeasure(RotationalStiffnessX.Value);
			} 
			set
			{
				throw new System.NotImplementedException();
				
			}
		}
		IIfcRotationalStiffnessSelect IIfcBoundaryNodeCondition.RotationalStiffnessY 
		{ 
			get
			{
 
				if(!RotationalStiffnessY.HasValue) return null;
				return new Ifc4.MeasureResource.IfcRotationalStiffnessMeasure(RotationalStiffnessY.Value);
			} 
			set
			{
				throw new System.NotImplementedException();
				
			}
		}
		IIfcRotationalStiffnessSelect IIfcBoundaryNodeCondition.RotationalStiffnessZ 
		{ 
			get
			{
 
				if(!RotationalStiffnessZ.HasValue) return null;
				return new Ifc4.MeasureResource.IfcRotationalStiffnessMeasure(RotationalStiffnessZ.Value);
			} 
			set
			{
				throw new System.NotImplementedException();
				
			}
		}
	//## Custom code
        private IIfcTranslationalStiffnessSelect _translationalStiffnessX;
        private IIfcTranslationalStiffnessSelect _translationalStiffnessY;
        private IIfcTranslationalStiffnessSelect _translationalStiffnessZ;
	    //##
	}
}