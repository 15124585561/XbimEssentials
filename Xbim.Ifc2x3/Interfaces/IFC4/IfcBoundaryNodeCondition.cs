// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Interfaces;
using System.Collections.Generic;
using System.Linq;

// ReSharper disable once CheckNamespace
namespace Xbim.Ifc2x3.StructuralLoadResource
{
	public partial class @IfcBoundaryNodeCondition : IIfcBoundaryNodeCondition
	{
		IIfcTranslationalStiffnessSelect IIfcBoundaryNodeCondition.TranslationalStiffnessX 
		{ 
			get
			{
				//## Handle return of TranslationalStiffnessX for which no match was found
                var value = LinearStiffnessX;
                if (!value.HasValue) return null;
                return new Ifc4.MeasureResource.IfcLinearStiffnessMeasure(value.Value);
				//##
			} 
			set
			{
				//## Handle setting of TranslationalStiffnessX for which no match was found
				//TODO: Handle setting of TranslationalStiffnessX for which no match was found
				throw new System.NotImplementedException();
				//##
				
			}
		}
		IIfcTranslationalStiffnessSelect IIfcBoundaryNodeCondition.TranslationalStiffnessY 
		{ 
			get
			{
				//## Handle return of TranslationalStiffnessY for which no match was found
                var value = LinearStiffnessY;
                if (!value.HasValue) return null;
                return new Ifc4.MeasureResource.IfcLinearStiffnessMeasure(value.Value);
				//##
			} 
			set
			{
				//## Handle setting of TranslationalStiffnessY for which no match was found
				//TODO: Handle setting of TranslationalStiffnessY for which no match was found
				throw new System.NotImplementedException();
				//##
				
			}
		}
		IIfcTranslationalStiffnessSelect IIfcBoundaryNodeCondition.TranslationalStiffnessZ 
		{ 
			get
			{
				//## Handle return of TranslationalStiffnessZ for which no match was found
                var value = LinearStiffnessZ;
                if (!value.HasValue) return null;
                return new Ifc4.MeasureResource.IfcLinearStiffnessMeasure(value.Value);
				//##
			} 
			set
			{
				//## Handle setting of TranslationalStiffnessZ for which no match was found
				//TODO: Handle setting of TranslationalStiffnessZ for which no match was found
				throw new System.NotImplementedException();
				//##
				
			}
		}
		IIfcRotationalStiffnessSelect IIfcBoundaryNodeCondition.RotationalStiffnessX 
		{ 
			get
			{
 
				if(!RotationalStiffnessX.HasValue) return null;
				return new Ifc4.MeasureResource.IfcRotationalStiffnessMeasure(RotationalStiffnessX.Value);
			} 
			set
			{
				throw new System.NotImplementedException();
				
			}
		}
		IIfcRotationalStiffnessSelect IIfcBoundaryNodeCondition.RotationalStiffnessY 
		{ 
			get
			{
 
				if(!RotationalStiffnessY.HasValue) return null;
				return new Ifc4.MeasureResource.IfcRotationalStiffnessMeasure(RotationalStiffnessY.Value);
			} 
			set
			{
				throw new System.NotImplementedException();
				
			}
		}
		IIfcRotationalStiffnessSelect IIfcBoundaryNodeCondition.RotationalStiffnessZ 
		{ 
			get
			{
 
				if(!RotationalStiffnessZ.HasValue) return null;
				return new Ifc4.MeasureResource.IfcRotationalStiffnessMeasure(RotationalStiffnessZ.Value);
			} 
			set
			{
				throw new System.NotImplementedException();
				
			}
		}
	//## Custom code
	//##
	}
}