// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Interfaces;
using System.Collections.Generic;
using System.Linq;

// ReSharper disable once CheckNamespace
namespace Xbim.Ifc2x3.ProfileResource
{
	public partial class @IfcLShapeProfileDef : IIfcLShapeProfileDef
	{
		Ifc4.MeasureResource.IfcPositiveLengthMeasure IIfcLShapeProfileDef.Depth 
		{ 
			get
			{
				return new Ifc4.MeasureResource.IfcPositiveLengthMeasure(Depth);
			} 
			set
			{
				Depth = new MeasureResource.IfcPositiveLengthMeasure(value);
				
			}
		}
		Ifc4.MeasureResource.IfcPositiveLengthMeasure? IIfcLShapeProfileDef.Width 
		{ 
			get
			{
				if (!Width.HasValue) return null;
				return new Ifc4.MeasureResource.IfcPositiveLengthMeasure(Width.Value);
			} 
			set
			{
				if (!value.HasValue)
				{
					Width =  null ;
					return;
				}
				Width = new MeasureResource.IfcPositiveLengthMeasure(value.Value);
				
			}
		}
		Ifc4.MeasureResource.IfcPositiveLengthMeasure IIfcLShapeProfileDef.Thickness 
		{ 
			get
			{
				return new Ifc4.MeasureResource.IfcPositiveLengthMeasure(Thickness);
			} 
			set
			{
				Thickness = new MeasureResource.IfcPositiveLengthMeasure(value);
				
			}
		}
		Ifc4.MeasureResource.IfcNonNegativeLengthMeasure? IIfcLShapeProfileDef.FilletRadius 
		{ 
			get
			{
				if (!FilletRadius.HasValue) return null;
				return new Ifc4.MeasureResource.IfcNonNegativeLengthMeasure(FilletRadius.Value);
			} 
			set
			{
				if (!value.HasValue)
				{
					FilletRadius =  null ;
					return;
				}
				FilletRadius = new MeasureResource.IfcPositiveLengthMeasure(value.Value);
				
			}
		}
		Ifc4.MeasureResource.IfcNonNegativeLengthMeasure? IIfcLShapeProfileDef.EdgeRadius 
		{ 
			get
			{
				if (!EdgeRadius.HasValue) return null;
				return new Ifc4.MeasureResource.IfcNonNegativeLengthMeasure(EdgeRadius.Value);
			} 
			set
			{
				if (!value.HasValue)
				{
					EdgeRadius =  null ;
					return;
				}
				EdgeRadius = new MeasureResource.IfcPositiveLengthMeasure(value.Value);
				
			}
		}
		Ifc4.MeasureResource.IfcPlaneAngleMeasure? IIfcLShapeProfileDef.LegSlope 
		{ 
			get
			{
				if (!LegSlope.HasValue) return null;
				return new Ifc4.MeasureResource.IfcPlaneAngleMeasure(LegSlope.Value);
			} 
			set
			{
				if (!value.HasValue)
				{
					LegSlope =  null ;
					return;
				}
				LegSlope = new MeasureResource.IfcPlaneAngleMeasure(value.Value);
				
			}
		}
	//## Custom code
	//##
	}
}