// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Interfaces;
using System.Collections.Generic;
using System.Linq;

// ReSharper disable once CheckNamespace
namespace Xbim.Ifc2x3.PresentationAppearanceResource
{
	public partial class @IfcFillAreaStyleHatching : IIfcFillAreaStyleHatching
	{
		IIfcCurveStyle IIfcFillAreaStyleHatching.HatchLineAppearance 
		{ 
			get
			{
				return HatchLineAppearance as IIfcCurveStyle;
			} 
		}
		Xbim.Ifc4.PresentationAppearanceResource.IfcHatchLineDistanceSelect IIfcFillAreaStyleHatching.StartOfNextHatchLine 
		{ 
			get
			{
				if (StartOfNextHatchLine == null) return null;
				var ifconedirectionrepeatfactor = StartOfNextHatchLine as Xbim.Ifc2x3.PresentationAppearanceResource.IfcOneDirectionRepeatFactor;
				if (ifconedirectionrepeatfactor != null) 
					//TODO: Handle entity ifconedirectionrepeatfactor which is not a part of the target select interface Xbim.Ifc4.PresentationAppearanceResource.IfcHatchLineDistanceSelect in property StartOfNextHatchLine
					throw new System.NotImplementedException();
				if (StartOfNextHatchLine is Xbim.Ifc2x3.MeasureResource.IfcPositiveLengthMeasure) 
					return new Xbim.Ifc4.MeasureResource.IfcPositiveLengthMeasure((double)(Xbim.Ifc2x3.MeasureResource.IfcPositiveLengthMeasure)StartOfNextHatchLine);
				return null;
			} 
		}
		IIfcCartesianPoint IIfcFillAreaStyleHatching.PointOfReferenceHatchLine 
		{ 
			get
			{
				return PointOfReferenceHatchLine as IIfcCartesianPoint;
			} 
		}
		IIfcCartesianPoint IIfcFillAreaStyleHatching.PatternStart 
		{ 
			get
			{
				return PatternStart as IIfcCartesianPoint;
			} 
		}
		Xbim.Ifc4.MeasureResource.IfcPlaneAngleMeasure IIfcFillAreaStyleHatching.HatchLineAngle 
		{ 
			get
			{
				return new Xbim.Ifc4.MeasureResource.IfcPlaneAngleMeasure((double)HatchLineAngle);
			} 
		}
	}
}