// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Interfaces;
using System.Collections.Generic;
using System.Linq;

// ReSharper disable once CheckNamespace
namespace Xbim.Ifc2x3.SharedBldgElements
{
	public partial class @IfcDoorLiningProperties : IIfcDoorLiningProperties
	{
		Xbim.Ifc4.MeasureResource.IfcPositiveLengthMeasure? IIfcDoorLiningProperties.LiningDepth 
		{ 
			get
			{
				if (LiningDepth == null) return null;
				return new Xbim.Ifc4.MeasureResource.IfcPositiveLengthMeasure((double)LiningDepth);
			} 
		}
		Xbim.Ifc4.MeasureResource.IfcNonNegativeLengthMeasure? IIfcDoorLiningProperties.LiningThickness 
		{ 
			get
			{
				if (LiningThickness == null) return null;
				return new Xbim.Ifc4.MeasureResource.IfcNonNegativeLengthMeasure((double)LiningThickness);
			} 
		}
		Xbim.Ifc4.MeasureResource.IfcPositiveLengthMeasure? IIfcDoorLiningProperties.ThresholdDepth 
		{ 
			get
			{
				if (ThresholdDepth == null) return null;
				return new Xbim.Ifc4.MeasureResource.IfcPositiveLengthMeasure((double)ThresholdDepth);
			} 
		}
		Xbim.Ifc4.MeasureResource.IfcNonNegativeLengthMeasure? IIfcDoorLiningProperties.ThresholdThickness 
		{ 
			get
			{
				if (ThresholdThickness == null) return null;
				return new Xbim.Ifc4.MeasureResource.IfcNonNegativeLengthMeasure((double)ThresholdThickness);
			} 
		}
		Xbim.Ifc4.MeasureResource.IfcNonNegativeLengthMeasure? IIfcDoorLiningProperties.TransomThickness 
		{ 
			get
			{
				if (TransomThickness == null) return null;
				return new Xbim.Ifc4.MeasureResource.IfcNonNegativeLengthMeasure((double)TransomThickness);
			} 
		}
		Xbim.Ifc4.MeasureResource.IfcLengthMeasure? IIfcDoorLiningProperties.TransomOffset 
		{ 
			get
			{
				if (TransomOffset == null) return null;
				return new Xbim.Ifc4.MeasureResource.IfcLengthMeasure((double)TransomOffset);
			} 
		}
		Xbim.Ifc4.MeasureResource.IfcLengthMeasure? IIfcDoorLiningProperties.LiningOffset 
		{ 
			get
			{
				if (LiningOffset == null) return null;
				return new Xbim.Ifc4.MeasureResource.IfcLengthMeasure((double)LiningOffset);
			} 
		}
		Xbim.Ifc4.MeasureResource.IfcLengthMeasure? IIfcDoorLiningProperties.ThresholdOffset 
		{ 
			get
			{
				if (ThresholdOffset == null) return null;
				return new Xbim.Ifc4.MeasureResource.IfcLengthMeasure((double)ThresholdOffset);
			} 
		}
		Xbim.Ifc4.MeasureResource.IfcPositiveLengthMeasure? IIfcDoorLiningProperties.CasingThickness 
		{ 
			get
			{
				if (CasingThickness == null) return null;
				return new Xbim.Ifc4.MeasureResource.IfcPositiveLengthMeasure((double)CasingThickness);
			} 
		}
		Xbim.Ifc4.MeasureResource.IfcPositiveLengthMeasure? IIfcDoorLiningProperties.CasingDepth 
		{ 
			get
			{
				if (CasingDepth == null) return null;
				return new Xbim.Ifc4.MeasureResource.IfcPositiveLengthMeasure((double)CasingDepth);
			} 
		}
		IIfcShapeAspect IIfcDoorLiningProperties.ShapeAspectStyle 
		{ 
			get
			{
				return ShapeAspectStyle as IIfcShapeAspect;
			} 
		}
		Xbim.Ifc4.MeasureResource.IfcLengthMeasure? IIfcDoorLiningProperties.LiningToPanelOffsetX 
		{ 
			get
			{
				throw new System.NotImplementedException();
			} 
		}
		Xbim.Ifc4.MeasureResource.IfcLengthMeasure? IIfcDoorLiningProperties.LiningToPanelOffsetY 
		{ 
			get
			{
				throw new System.NotImplementedException();
			} 
		}
	}
}