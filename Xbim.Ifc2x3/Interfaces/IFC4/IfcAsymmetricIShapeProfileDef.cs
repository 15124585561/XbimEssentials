// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Interfaces;
using System.Collections.Generic;
using System.Linq;

// ReSharper disable once CheckNamespace
namespace Xbim.Ifc2x3.ProfileResource
{
	public partial class @IfcAsymmetricIShapeProfileDef : IIfcAsymmetricIShapeProfileDef
	{
		Ifc4.MeasureResource.IfcPositiveLengthMeasure IIfcAsymmetricIShapeProfileDef.BottomFlangeWidth 
		{ 
			get
			{
				//## Handle return of BottomFlangeWidth for which no match was found
				//TODO: Handle return of BottomFlangeWidth for which no match was found
				throw new System.NotImplementedException();
				//##
			} 
		}
		Ifc4.MeasureResource.IfcPositiveLengthMeasure IIfcAsymmetricIShapeProfileDef.OverallDepth 
		{ 
			get
			{
				return new Ifc4.MeasureResource.IfcPositiveLengthMeasure((double)OverallDepth);
			} 
		}
		Ifc4.MeasureResource.IfcPositiveLengthMeasure IIfcAsymmetricIShapeProfileDef.WebThickness 
		{ 
			get
			{
				return new Ifc4.MeasureResource.IfcPositiveLengthMeasure((double)WebThickness);
			} 
		}
		Ifc4.MeasureResource.IfcPositiveLengthMeasure IIfcAsymmetricIShapeProfileDef.BottomFlangeThickness 
		{ 
			get
			{
				//## Handle return of BottomFlangeThickness for which no match was found
				//TODO: Handle return of BottomFlangeThickness for which no match was found
				throw new System.NotImplementedException();
				//##
			} 
		}
		Ifc4.MeasureResource.IfcNonNegativeLengthMeasure? IIfcAsymmetricIShapeProfileDef.BottomFlangeFilletRadius 
		{ 
			get
			{
				//## Handle return of BottomFlangeFilletRadius for which no match was found
				//TODO: Handle return of BottomFlangeFilletRadius for which no match was found
				throw new System.NotImplementedException();
				//##
			} 
		}
		Ifc4.MeasureResource.IfcPositiveLengthMeasure IIfcAsymmetricIShapeProfileDef.TopFlangeWidth 
		{ 
			get
			{
				return new Ifc4.MeasureResource.IfcPositiveLengthMeasure((double)TopFlangeWidth);
			} 
		}
		Ifc4.MeasureResource.IfcPositiveLengthMeasure? IIfcAsymmetricIShapeProfileDef.TopFlangeThickness 
		{ 
			get
			{
				if (TopFlangeThickness == null) return null;
				return new Ifc4.MeasureResource.IfcPositiveLengthMeasure((double)TopFlangeThickness);
			} 
		}
		Ifc4.MeasureResource.IfcNonNegativeLengthMeasure? IIfcAsymmetricIShapeProfileDef.TopFlangeFilletRadius 
		{ 
			get
			{
				if (TopFlangeFilletRadius == null) return null;
				return new Ifc4.MeasureResource.IfcNonNegativeLengthMeasure((double)TopFlangeFilletRadius);
			} 
		}
		Ifc4.MeasureResource.IfcNonNegativeLengthMeasure? IIfcAsymmetricIShapeProfileDef.BottomFlangeEdgeRadius 
		{ 
			get
			{
				//## Handle return of BottomFlangeEdgeRadius for which no match was found
				//TODO: Handle return of BottomFlangeEdgeRadius for which no match was found
				throw new System.NotImplementedException();
				//##
			} 
		}
		Ifc4.MeasureResource.IfcPlaneAngleMeasure? IIfcAsymmetricIShapeProfileDef.BottomFlangeSlope 
		{ 
			get
			{
				//## Handle return of BottomFlangeSlope for which no match was found
				//TODO: Handle return of BottomFlangeSlope for which no match was found
				throw new System.NotImplementedException();
				//##
			} 
		}
		Ifc4.MeasureResource.IfcNonNegativeLengthMeasure? IIfcAsymmetricIShapeProfileDef.TopFlangeEdgeRadius 
		{ 
			get
			{
				//## Handle return of TopFlangeEdgeRadius for which no match was found
				//TODO: Handle return of TopFlangeEdgeRadius for which no match was found
				throw new System.NotImplementedException();
				//##
			} 
		}
		Ifc4.MeasureResource.IfcPlaneAngleMeasure? IIfcAsymmetricIShapeProfileDef.TopFlangeSlope 
		{ 
			get
			{
				//## Handle return of TopFlangeSlope for which no match was found
				//TODO: Handle return of TopFlangeSlope for which no match was found
				throw new System.NotImplementedException();
				//##
			} 
		}
	}
}