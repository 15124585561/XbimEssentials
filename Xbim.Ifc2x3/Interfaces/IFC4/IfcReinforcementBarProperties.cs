// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Interfaces;
using System.Collections.Generic;
using System.Linq;

// ReSharper disable once CheckNamespace
namespace Xbim.Ifc2x3.ProfilePropertyResource
{
	public partial class @IfcReinforcementBarProperties : IIfcReinforcementBarProperties
	{
		Ifc4.MeasureResource.IfcAreaMeasure IIfcReinforcementBarProperties.TotalCrossSectionArea 
		{ 
			get
			{
				return new Ifc4.MeasureResource.IfcAreaMeasure((double)TotalCrossSectionArea);
			} 
		}
		Ifc4.MeasureResource.IfcLabel IIfcReinforcementBarProperties.SteelGrade 
		{ 
			get
			{
				return new Ifc4.MeasureResource.IfcLabel((string)SteelGrade);
			} 
		}
		Ifc4.ProfileResource.IfcReinforcingBarSurfaceEnum? IIfcReinforcementBarProperties.BarSurface 
		{ 
			get
			{
				switch (BarSurface)
				{
					case IfcReinforcingBarSurfaceEnum.PLAIN:
						return Ifc4.ProfileResource.IfcReinforcingBarSurfaceEnum.PLAIN;
					
					case IfcReinforcingBarSurfaceEnum.TEXTURED:
						return Ifc4.ProfileResource.IfcReinforcingBarSurfaceEnum.TEXTURED;
					
					
					default:
						throw new System.ArgumentOutOfRangeException();
				}
			} 
		}
		Ifc4.MeasureResource.IfcLengthMeasure? IIfcReinforcementBarProperties.EffectiveDepth 
		{ 
			get
			{
				if (EffectiveDepth == null) return null;
				return new Ifc4.MeasureResource.IfcLengthMeasure((double)EffectiveDepth);
			} 
		}
		Ifc4.MeasureResource.IfcPositiveLengthMeasure? IIfcReinforcementBarProperties.NominalBarDiameter 
		{ 
			get
			{
				if (NominalBarDiameter == null) return null;
				return new Ifc4.MeasureResource.IfcPositiveLengthMeasure((double)NominalBarDiameter);
			} 
		}
		Ifc4.MeasureResource.IfcCountMeasure? IIfcReinforcementBarProperties.BarCount 
		{ 
			get
			{
				if (BarCount == null) return null;
				return new Ifc4.MeasureResource.IfcCountMeasure((double)BarCount);
			} 
		}
		IEnumerable<IIfcExternalReferenceRelationship> IIfcPropertyAbstraction.HasExternalReferences 
		{ 
			get
			{
				return Model.Instances.Where<IIfcExternalReferenceRelationship>(e => e.RelatedResourceObjects != null &&  e.RelatedResourceObjects.Contains(this));
			} 
		}
	}
}