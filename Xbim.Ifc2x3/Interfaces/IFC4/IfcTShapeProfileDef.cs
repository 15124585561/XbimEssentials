// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Interfaces;
using System.Collections.Generic;
using System.Linq;

// ReSharper disable once CheckNamespace
namespace Xbim.Ifc2x3.ProfileResource
{
	public partial class @IfcTShapeProfileDef : IIfcTShapeProfileDef
	{
		Ifc4.MeasureResource.IfcPositiveLengthMeasure IIfcTShapeProfileDef.Depth 
		{ 
			get
			{
				return new Ifc4.MeasureResource.IfcPositiveLengthMeasure(Depth);
			} 
			set
			{
				Depth = new MeasureResource.IfcPositiveLengthMeasure(value);
				
			}
		}
		Ifc4.MeasureResource.IfcPositiveLengthMeasure IIfcTShapeProfileDef.FlangeWidth 
		{ 
			get
			{
				return new Ifc4.MeasureResource.IfcPositiveLengthMeasure(FlangeWidth);
			} 
			set
			{
				FlangeWidth = new MeasureResource.IfcPositiveLengthMeasure(value);
				
			}
		}
		Ifc4.MeasureResource.IfcPositiveLengthMeasure IIfcTShapeProfileDef.WebThickness 
		{ 
			get
			{
				return new Ifc4.MeasureResource.IfcPositiveLengthMeasure(WebThickness);
			} 
			set
			{
				WebThickness = new MeasureResource.IfcPositiveLengthMeasure(value);
				
			}
		}
		Ifc4.MeasureResource.IfcPositiveLengthMeasure IIfcTShapeProfileDef.FlangeThickness 
		{ 
			get
			{
				return new Ifc4.MeasureResource.IfcPositiveLengthMeasure(FlangeThickness);
			} 
			set
			{
				FlangeThickness = new MeasureResource.IfcPositiveLengthMeasure(value);
				
			}
		}
		Ifc4.MeasureResource.IfcNonNegativeLengthMeasure? IIfcTShapeProfileDef.FilletRadius 
		{ 
			get
			{
				if (!FilletRadius.HasValue) return null;
				return new Ifc4.MeasureResource.IfcNonNegativeLengthMeasure(FilletRadius.Value);
			} 
			set
			{
				if (!value.HasValue)
				{
					FilletRadius =  null ;
					return;
				}
				FilletRadius = new MeasureResource.IfcPositiveLengthMeasure(value.Value);
				
			}
		}
		Ifc4.MeasureResource.IfcNonNegativeLengthMeasure? IIfcTShapeProfileDef.FlangeEdgeRadius 
		{ 
			get
			{
				if (!FlangeEdgeRadius.HasValue) return null;
				return new Ifc4.MeasureResource.IfcNonNegativeLengthMeasure(FlangeEdgeRadius.Value);
			} 
			set
			{
				if (!value.HasValue)
				{
					FlangeEdgeRadius =  null ;
					return;
				}
				FlangeEdgeRadius = new MeasureResource.IfcPositiveLengthMeasure(value.Value);
				
			}
		}
		Ifc4.MeasureResource.IfcNonNegativeLengthMeasure? IIfcTShapeProfileDef.WebEdgeRadius 
		{ 
			get
			{
				if (!WebEdgeRadius.HasValue) return null;
				return new Ifc4.MeasureResource.IfcNonNegativeLengthMeasure(WebEdgeRadius.Value);
			} 
			set
			{
				if (!value.HasValue)
				{
					WebEdgeRadius =  null ;
					return;
				}
				WebEdgeRadius = new MeasureResource.IfcPositiveLengthMeasure(value.Value);
				
			}
		}
		Ifc4.MeasureResource.IfcPlaneAngleMeasure? IIfcTShapeProfileDef.WebSlope 
		{ 
			get
			{
				if (!WebSlope.HasValue) return null;
				return new Ifc4.MeasureResource.IfcPlaneAngleMeasure(WebSlope.Value);
			} 
			set
			{
				if (!value.HasValue)
				{
					WebSlope =  null ;
					return;
				}
				WebSlope = new MeasureResource.IfcPlaneAngleMeasure(value.Value);
				
			}
		}
		Ifc4.MeasureResource.IfcPlaneAngleMeasure? IIfcTShapeProfileDef.FlangeSlope 
		{ 
			get
			{
				if (!FlangeSlope.HasValue) return null;
				return new Ifc4.MeasureResource.IfcPlaneAngleMeasure(FlangeSlope.Value);
			} 
			set
			{
				if (!value.HasValue)
				{
					FlangeSlope =  null ;
					return;
				}
				FlangeSlope = new MeasureResource.IfcPlaneAngleMeasure(value.Value);
				
			}
		}
	//## Custom code
	//##
	}
}