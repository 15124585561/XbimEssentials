// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Interfaces;
using System.Collections.Generic;
using System.Linq;

// ReSharper disable once CheckNamespace
namespace Xbim.Ifc2x3.SharedBldgElements
{
	public partial class @IfcWindowPanelProperties : IIfcWindowPanelProperties
	{
		Ifc4.ArchitectureDomain.IfcWindowPanelOperationEnum IIfcWindowPanelProperties.OperationType 
		{ 
			get
			{
				switch (OperationType)
				{
					case IfcWindowPanelOperationEnum.SIDEHUNGRIGHTHAND:
						return Ifc4.ArchitectureDomain.IfcWindowPanelOperationEnum.SIDEHUNGRIGHTHAND;
					
					case IfcWindowPanelOperationEnum.SIDEHUNGLEFTHAND:
						return Ifc4.ArchitectureDomain.IfcWindowPanelOperationEnum.SIDEHUNGLEFTHAND;
					
					case IfcWindowPanelOperationEnum.TILTANDTURNRIGHTHAND:
						return Ifc4.ArchitectureDomain.IfcWindowPanelOperationEnum.TILTANDTURNRIGHTHAND;
					
					case IfcWindowPanelOperationEnum.TILTANDTURNLEFTHAND:
						return Ifc4.ArchitectureDomain.IfcWindowPanelOperationEnum.TILTANDTURNLEFTHAND;
					
					case IfcWindowPanelOperationEnum.TOPHUNG:
						return Ifc4.ArchitectureDomain.IfcWindowPanelOperationEnum.TOPHUNG;
					
					case IfcWindowPanelOperationEnum.BOTTOMHUNG:
						return Ifc4.ArchitectureDomain.IfcWindowPanelOperationEnum.BOTTOMHUNG;
					
					case IfcWindowPanelOperationEnum.PIVOTHORIZONTAL:
						return Ifc4.ArchitectureDomain.IfcWindowPanelOperationEnum.PIVOTHORIZONTAL;
					
					case IfcWindowPanelOperationEnum.PIVOTVERTICAL:
						return Ifc4.ArchitectureDomain.IfcWindowPanelOperationEnum.PIVOTVERTICAL;
					
					case IfcWindowPanelOperationEnum.SLIDINGHORIZONTAL:
						return Ifc4.ArchitectureDomain.IfcWindowPanelOperationEnum.SLIDINGHORIZONTAL;
					
					case IfcWindowPanelOperationEnum.SLIDINGVERTICAL:
						return Ifc4.ArchitectureDomain.IfcWindowPanelOperationEnum.SLIDINGVERTICAL;
					
					case IfcWindowPanelOperationEnum.REMOVABLECASEMENT:
						return Ifc4.ArchitectureDomain.IfcWindowPanelOperationEnum.REMOVABLECASEMENT;
					
					case IfcWindowPanelOperationEnum.FIXEDCASEMENT:
						return Ifc4.ArchitectureDomain.IfcWindowPanelOperationEnum.FIXEDCASEMENT;
					
					case IfcWindowPanelOperationEnum.OTHEROPERATION:
						return Ifc4.ArchitectureDomain.IfcWindowPanelOperationEnum.OTHEROPERATION;
					
					case IfcWindowPanelOperationEnum.NOTDEFINED:
						return Ifc4.ArchitectureDomain.IfcWindowPanelOperationEnum.NOTDEFINED;
					
					
					default:
						throw new System.ArgumentOutOfRangeException();
				}
			} 
		}
		Ifc4.ArchitectureDomain.IfcWindowPanelPositionEnum IIfcWindowPanelProperties.PanelPosition 
		{ 
			get
			{
				switch (PanelPosition)
				{
					case IfcWindowPanelPositionEnum.LEFT:
						return Ifc4.ArchitectureDomain.IfcWindowPanelPositionEnum.LEFT;
					
					case IfcWindowPanelPositionEnum.MIDDLE:
						return Ifc4.ArchitectureDomain.IfcWindowPanelPositionEnum.MIDDLE;
					
					case IfcWindowPanelPositionEnum.RIGHT:
						return Ifc4.ArchitectureDomain.IfcWindowPanelPositionEnum.RIGHT;
					
					case IfcWindowPanelPositionEnum.BOTTOM:
						return Ifc4.ArchitectureDomain.IfcWindowPanelPositionEnum.BOTTOM;
					
					case IfcWindowPanelPositionEnum.TOP:
						return Ifc4.ArchitectureDomain.IfcWindowPanelPositionEnum.TOP;
					
					case IfcWindowPanelPositionEnum.NOTDEFINED:
						return Ifc4.ArchitectureDomain.IfcWindowPanelPositionEnum.NOTDEFINED;
					
					
					default:
						throw new System.ArgumentOutOfRangeException();
				}
			} 
		}
		Ifc4.MeasureResource.IfcPositiveLengthMeasure? IIfcWindowPanelProperties.FrameDepth 
		{ 
			get
			{
				if (!FrameDepth.HasValue) return null;
				return new Ifc4.MeasureResource.IfcPositiveLengthMeasure(FrameDepth.Value);
			} 
		}
		Ifc4.MeasureResource.IfcPositiveLengthMeasure? IIfcWindowPanelProperties.FrameThickness 
		{ 
			get
			{
				if (!FrameThickness.HasValue) return null;
				return new Ifc4.MeasureResource.IfcPositiveLengthMeasure(FrameThickness.Value);
			} 
		}
		IIfcShapeAspect IIfcWindowPanelProperties.ShapeAspectStyle 
		{ 
			get
			{
				return ShapeAspectStyle;
			} 
		}
	}
}