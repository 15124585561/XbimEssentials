// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Interfaces;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;

// ReSharper disable once CheckNamespace
namespace Xbim.Ifc2x3.TimeSeriesResource
{
	public partial class @IfcIrregularTimeSeriesValue : IIfcIrregularTimeSeriesValue
	{
		Ifc4.DateTimeResource.IfcDateTime IIfcIrregularTimeSeriesValue.TimeStamp 
		{ 
			get
			{
				//## Handle return of TimeStamp for which no match was found
			    return TimeStamp != null
			        ? new Ifc4.DateTimeResource.IfcDateTime(TimeStamp.ToISODateTimeString())
                    : new Ifc4.DateTimeResource.IfcDateTime();
				//##
			} 
			set
			{
				//## Handle setting of TimeStamp for which no match was found
                System.DateTime d = value;
                TimeStamp = Model.Instances.New<DateTimeResource.IfcDateAndTime>(dt =>
                {
                    dt.DateComponent = Model.Instances.New<DateTimeResource.IfcCalendarDate>(date =>
                    {
                        date.YearComponent = d.Year;
                        date.MonthComponent = d.Month;
                        date.DayComponent = d.Day;
                    });
                    dt.TimeComponent = Model.Instances.New<DateTimeResource.IfcLocalTime>(t =>
                    {
                        t.HourComponent = d.Hour;
                        t.MinuteComponent = d.Minute;
                        t.SecondComponent = d.Second;
                    });
                });
				//##
				
			}
		}
		IItemSet<IIfcValue> IIfcIrregularTimeSeriesValue.ListValues 
		{ 
			get
			{
			
				return _listValuesIfc4 ?? (_listValuesIfc4 = new Common.Collections.ExtendedItemSet<MeasureResource.IfcValue, IIfcValue>(
                    ListValues, 
                    new ItemSet<IIfcValue>(this, 0, 255), 
                    ListValuesToIfc4, 
                    ListValuesToIfc2x3));
			} 
		}

		//private field to hold any extended data
		private IItemSet<IIfcValue> _listValuesIfc4;

		//transformation function to convert/cast IFC2x3 data to appear as IFC4
		private IIfcValue ListValuesToIfc4 (MeasureResource.IfcValue member)
		{
			if (member is MeasureResource.IfcVolumeMeasure) 
				return new Ifc4.MeasureResource.IfcVolumeMeasure((MeasureResource.IfcVolumeMeasure)member);
			if (member is MeasureResource.IfcTimeMeasure) 
				return new Ifc4.MeasureResource.IfcTimeMeasure((MeasureResource.IfcTimeMeasure)member);
			if (member is MeasureResource.IfcThermodynamicTemperatureMeasure) 
				return new Ifc4.MeasureResource.IfcThermodynamicTemperatureMeasure((MeasureResource.IfcThermodynamicTemperatureMeasure)member);
			if (member is MeasureResource.IfcSolidAngleMeasure) 
				return new Ifc4.MeasureResource.IfcSolidAngleMeasure((MeasureResource.IfcSolidAngleMeasure)member);
			if (member is MeasureResource.IfcPositiveRatioMeasure) 
				return new Ifc4.MeasureResource.IfcPositiveRatioMeasure((MeasureResource.IfcPositiveRatioMeasure)member);
			if (member is MeasureResource.IfcRatioMeasure) 
				return new Ifc4.MeasureResource.IfcRatioMeasure((MeasureResource.IfcRatioMeasure)member);
			if (member is MeasureResource.IfcPositivePlaneAngleMeasure) 
				return new Ifc4.MeasureResource.IfcPositivePlaneAngleMeasure((MeasureResource.IfcPositivePlaneAngleMeasure)member);
			if (member is MeasureResource.IfcPlaneAngleMeasure) 
				return new Ifc4.MeasureResource.IfcPlaneAngleMeasure((MeasureResource.IfcPlaneAngleMeasure)member);
			if (member is MeasureResource.IfcParameterValue) 
				return new Ifc4.MeasureResource.IfcParameterValue((MeasureResource.IfcParameterValue)member);
			if (member is MeasureResource.IfcNumericMeasure) 
				return new Ifc4.MeasureResource.IfcNumericMeasure((MeasureResource.IfcNumericMeasure)member);
			if (member is MeasureResource.IfcMassMeasure) 
				return new Ifc4.MeasureResource.IfcMassMeasure((MeasureResource.IfcMassMeasure)member);
			if (member is MeasureResource.IfcPositiveLengthMeasure) 
				return new Ifc4.MeasureResource.IfcPositiveLengthMeasure((MeasureResource.IfcPositiveLengthMeasure)member);
			if (member is MeasureResource.IfcLengthMeasure) 
				return new Ifc4.MeasureResource.IfcLengthMeasure((MeasureResource.IfcLengthMeasure)member);
			if (member is MeasureResource.IfcElectricCurrentMeasure) 
				return new Ifc4.MeasureResource.IfcElectricCurrentMeasure((MeasureResource.IfcElectricCurrentMeasure)member);
			if (member is MeasureResource.IfcDescriptiveMeasure) 
				return new Ifc4.MeasureResource.IfcDescriptiveMeasure((MeasureResource.IfcDescriptiveMeasure)member);
			if (member is MeasureResource.IfcCountMeasure) 
				return new Ifc4.MeasureResource.IfcCountMeasure((MeasureResource.IfcCountMeasure)member);
			if (member is MeasureResource.IfcContextDependentMeasure) 
				return new Ifc4.MeasureResource.IfcContextDependentMeasure((MeasureResource.IfcContextDependentMeasure)member);
			if (member is MeasureResource.IfcAreaMeasure) 
				return new Ifc4.MeasureResource.IfcAreaMeasure((MeasureResource.IfcAreaMeasure)member);
			if (member is MeasureResource.IfcAmountOfSubstanceMeasure) 
				return new Ifc4.MeasureResource.IfcAmountOfSubstanceMeasure((MeasureResource.IfcAmountOfSubstanceMeasure)member);
			if (member is MeasureResource.IfcLuminousIntensityMeasure) 
				return new Ifc4.MeasureResource.IfcLuminousIntensityMeasure((MeasureResource.IfcLuminousIntensityMeasure)member);
			if (member is MeasureResource.IfcNormalisedRatioMeasure) 
				return new Ifc4.MeasureResource.IfcNormalisedRatioMeasure((MeasureResource.IfcNormalisedRatioMeasure)member);
			if (member is MeasureResource.IfcComplexNumber) 
				return new Ifc4.MeasureResource.IfcComplexNumber((MeasureResource.IfcComplexNumber)member);
			if (member is MeasureResource.IfcInteger) 
				return new Ifc4.MeasureResource.IfcInteger((MeasureResource.IfcInteger)member);
			if (member is MeasureResource.IfcReal) 
				return new Ifc4.MeasureResource.IfcReal((MeasureResource.IfcReal)member);
			if (member is MeasureResource.IfcBoolean) 
				return new Ifc4.MeasureResource.IfcBoolean((MeasureResource.IfcBoolean)member);
			if (member is MeasureResource.IfcIdentifier) 
				return new Ifc4.MeasureResource.IfcIdentifier((MeasureResource.IfcIdentifier)member);
			if (member is MeasureResource.IfcText) 
				return new Ifc4.MeasureResource.IfcText((MeasureResource.IfcText)member);
			if (member is MeasureResource.IfcLabel) 
				return new Ifc4.MeasureResource.IfcLabel((MeasureResource.IfcLabel)member);
			if (member is MeasureResource.IfcLogical) 
				return new Ifc4.MeasureResource.IfcLogical((MeasureResource.IfcLogical)member);
			if (member is MeasureResource.IfcVolumetricFlowRateMeasure) 
				return new Ifc4.MeasureResource.IfcVolumetricFlowRateMeasure((MeasureResource.IfcVolumetricFlowRateMeasure)member);
			if (member is MeasureResource.IfcTimeStamp) 
				return new Ifc4.DateTimeResource.IfcTimeStamp((MeasureResource.IfcTimeStamp)member);
			if (member is MeasureResource.IfcThermalTransmittanceMeasure) 
				return new Ifc4.MeasureResource.IfcThermalTransmittanceMeasure((MeasureResource.IfcThermalTransmittanceMeasure)member);
			if (member is MeasureResource.IfcThermalResistanceMeasure) 
				return new Ifc4.MeasureResource.IfcThermalResistanceMeasure((MeasureResource.IfcThermalResistanceMeasure)member);
			if (member is MeasureResource.IfcThermalAdmittanceMeasure) 
				return new Ifc4.MeasureResource.IfcThermalAdmittanceMeasure((MeasureResource.IfcThermalAdmittanceMeasure)member);
			if (member is MeasureResource.IfcPressureMeasure) 
				return new Ifc4.MeasureResource.IfcPressureMeasure((MeasureResource.IfcPressureMeasure)member);
			if (member is MeasureResource.IfcPowerMeasure) 
				return new Ifc4.MeasureResource.IfcPowerMeasure((MeasureResource.IfcPowerMeasure)member);
			if (member is MeasureResource.IfcMassFlowRateMeasure) 
				return new Ifc4.MeasureResource.IfcMassFlowRateMeasure((MeasureResource.IfcMassFlowRateMeasure)member);
			if (member is MeasureResource.IfcMassDensityMeasure) 
				return new Ifc4.MeasureResource.IfcMassDensityMeasure((MeasureResource.IfcMassDensityMeasure)member);
			if (member is MeasureResource.IfcLinearVelocityMeasure) 
				return new Ifc4.MeasureResource.IfcLinearVelocityMeasure((MeasureResource.IfcLinearVelocityMeasure)member);
			if (member is MeasureResource.IfcKinematicViscosityMeasure) 
				return new Ifc4.MeasureResource.IfcKinematicViscosityMeasure((MeasureResource.IfcKinematicViscosityMeasure)member);
			if (member is MeasureResource.IfcIntegerCountRateMeasure) 
				return new Ifc4.MeasureResource.IfcIntegerCountRateMeasure((MeasureResource.IfcIntegerCountRateMeasure)member);
			if (member is MeasureResource.IfcHeatFluxDensityMeasure) 
				return new Ifc4.MeasureResource.IfcHeatFluxDensityMeasure((MeasureResource.IfcHeatFluxDensityMeasure)member);
			if (member is MeasureResource.IfcFrequencyMeasure) 
				return new Ifc4.MeasureResource.IfcFrequencyMeasure((MeasureResource.IfcFrequencyMeasure)member);
			if (member is MeasureResource.IfcEnergyMeasure) 
				return new Ifc4.MeasureResource.IfcEnergyMeasure((MeasureResource.IfcEnergyMeasure)member);
			if (member is MeasureResource.IfcElectricVoltageMeasure) 
				return new Ifc4.MeasureResource.IfcElectricVoltageMeasure((MeasureResource.IfcElectricVoltageMeasure)member);
			if (member is MeasureResource.IfcDynamicViscosityMeasure) 
				return new Ifc4.MeasureResource.IfcDynamicViscosityMeasure((MeasureResource.IfcDynamicViscosityMeasure)member);
			if (member is MeasureResource.IfcCompoundPlaneAngleMeasure) 
				return new Ifc4.MeasureResource.IfcCompoundPlaneAngleMeasure((MeasureResource.IfcCompoundPlaneAngleMeasure)member);
			if (member is MeasureResource.IfcAngularVelocityMeasure) 
				return new Ifc4.MeasureResource.IfcAngularVelocityMeasure((MeasureResource.IfcAngularVelocityMeasure)member);
			if (member is MeasureResource.IfcThermalConductivityMeasure) 
				return new Ifc4.MeasureResource.IfcThermalConductivityMeasure((MeasureResource.IfcThermalConductivityMeasure)member);
			if (member is MeasureResource.IfcMolecularWeightMeasure) 
				return new Ifc4.MeasureResource.IfcMolecularWeightMeasure((MeasureResource.IfcMolecularWeightMeasure)member);
			if (member is MeasureResource.IfcVaporPermeabilityMeasure) 
				return new Ifc4.MeasureResource.IfcVaporPermeabilityMeasure((MeasureResource.IfcVaporPermeabilityMeasure)member);
			if (member is MeasureResource.IfcMoistureDiffusivityMeasure) 
				return new Ifc4.MeasureResource.IfcMoistureDiffusivityMeasure((MeasureResource.IfcMoistureDiffusivityMeasure)member);
			if (member is MeasureResource.IfcIsothermalMoistureCapacityMeasure) 
				return new Ifc4.MeasureResource.IfcIsothermalMoistureCapacityMeasure((MeasureResource.IfcIsothermalMoistureCapacityMeasure)member);
			if (member is MeasureResource.IfcSpecificHeatCapacityMeasure) 
				return new Ifc4.MeasureResource.IfcSpecificHeatCapacityMeasure((MeasureResource.IfcSpecificHeatCapacityMeasure)member);
			if (member is MeasureResource.IfcMonetaryMeasure) 
				return new Ifc4.MeasureResource.IfcMonetaryMeasure((MeasureResource.IfcMonetaryMeasure)member);
			if (member is MeasureResource.IfcMagneticFluxDensityMeasure) 
				return new Ifc4.MeasureResource.IfcMagneticFluxDensityMeasure((MeasureResource.IfcMagneticFluxDensityMeasure)member);
			if (member is MeasureResource.IfcMagneticFluxMeasure) 
				return new Ifc4.MeasureResource.IfcMagneticFluxMeasure((MeasureResource.IfcMagneticFluxMeasure)member);
			if (member is MeasureResource.IfcLuminousFluxMeasure) 
				return new Ifc4.MeasureResource.IfcLuminousFluxMeasure((MeasureResource.IfcLuminousFluxMeasure)member);
			if (member is MeasureResource.IfcForceMeasure) 
				return new Ifc4.MeasureResource.IfcForceMeasure((MeasureResource.IfcForceMeasure)member);
			if (member is MeasureResource.IfcInductanceMeasure) 
				return new Ifc4.MeasureResource.IfcInductanceMeasure((MeasureResource.IfcInductanceMeasure)member);
			if (member is MeasureResource.IfcIlluminanceMeasure) 
				return new Ifc4.MeasureResource.IfcIlluminanceMeasure((MeasureResource.IfcIlluminanceMeasure)member);
			if (member is MeasureResource.IfcElectricResistanceMeasure) 
				return new Ifc4.MeasureResource.IfcElectricResistanceMeasure((MeasureResource.IfcElectricResistanceMeasure)member);
			if (member is MeasureResource.IfcElectricConductanceMeasure) 
				return new Ifc4.MeasureResource.IfcElectricConductanceMeasure((MeasureResource.IfcElectricConductanceMeasure)member);
			if (member is MeasureResource.IfcElectricChargeMeasure) 
				return new Ifc4.MeasureResource.IfcElectricChargeMeasure((MeasureResource.IfcElectricChargeMeasure)member);
			if (member is MeasureResource.IfcDoseEquivalentMeasure) 
				return new Ifc4.MeasureResource.IfcDoseEquivalentMeasure((MeasureResource.IfcDoseEquivalentMeasure)member);
			if (member is MeasureResource.IfcElectricCapacitanceMeasure) 
				return new Ifc4.MeasureResource.IfcElectricCapacitanceMeasure((MeasureResource.IfcElectricCapacitanceMeasure)member);
			if (member is MeasureResource.IfcAbsorbedDoseMeasure) 
				return new Ifc4.MeasureResource.IfcAbsorbedDoseMeasure((MeasureResource.IfcAbsorbedDoseMeasure)member);
			if (member is MeasureResource.IfcRadioActivityMeasure) 
				return new Ifc4.MeasureResource.IfcRadioActivityMeasure((MeasureResource.IfcRadioActivityMeasure)member);
			if (member is MeasureResource.IfcRotationalFrequencyMeasure) 
				return new Ifc4.MeasureResource.IfcRotationalFrequencyMeasure((MeasureResource.IfcRotationalFrequencyMeasure)member);
			if (member is MeasureResource.IfcTorqueMeasure) 
				return new Ifc4.MeasureResource.IfcTorqueMeasure((MeasureResource.IfcTorqueMeasure)member);
			if (member is MeasureResource.IfcAccelerationMeasure) 
				return new Ifc4.MeasureResource.IfcAccelerationMeasure((MeasureResource.IfcAccelerationMeasure)member);
			if (member is MeasureResource.IfcLinearForceMeasure) 
				return new Ifc4.MeasureResource.IfcLinearForceMeasure((MeasureResource.IfcLinearForceMeasure)member);
			if (member is MeasureResource.IfcLinearStiffnessMeasure) 
				return new Ifc4.MeasureResource.IfcLinearStiffnessMeasure((MeasureResource.IfcLinearStiffnessMeasure)member);
			if (member is MeasureResource.IfcModulusOfSubgradeReactionMeasure) 
				return new Ifc4.MeasureResource.IfcModulusOfSubgradeReactionMeasure((MeasureResource.IfcModulusOfSubgradeReactionMeasure)member);
			if (member is MeasureResource.IfcModulusOfElasticityMeasure) 
				return new Ifc4.MeasureResource.IfcModulusOfElasticityMeasure((MeasureResource.IfcModulusOfElasticityMeasure)member);
			if (member is MeasureResource.IfcMomentOfInertiaMeasure) 
				return new Ifc4.MeasureResource.IfcMomentOfInertiaMeasure((MeasureResource.IfcMomentOfInertiaMeasure)member);
			if (member is MeasureResource.IfcPlanarForceMeasure) 
				return new Ifc4.MeasureResource.IfcPlanarForceMeasure((MeasureResource.IfcPlanarForceMeasure)member);
			if (member is MeasureResource.IfcRotationalStiffnessMeasure) 
				return new Ifc4.MeasureResource.IfcRotationalStiffnessMeasure((MeasureResource.IfcRotationalStiffnessMeasure)member);
			if (member is MeasureResource.IfcShearModulusMeasure) 
				return new Ifc4.MeasureResource.IfcShearModulusMeasure((MeasureResource.IfcShearModulusMeasure)member);
			if (member is MeasureResource.IfcLinearMomentMeasure) 
				return new Ifc4.MeasureResource.IfcLinearMomentMeasure((MeasureResource.IfcLinearMomentMeasure)member);
			if (member is MeasureResource.IfcLuminousIntensityDistributionMeasure) 
				return new Ifc4.MeasureResource.IfcLuminousIntensityDistributionMeasure((MeasureResource.IfcLuminousIntensityDistributionMeasure)member);
			if (member is MeasureResource.IfcCurvatureMeasure) 
				return new Ifc4.MeasureResource.IfcCurvatureMeasure((MeasureResource.IfcCurvatureMeasure)member);
			if (member is MeasureResource.IfcMassPerLengthMeasure) 
				return new Ifc4.MeasureResource.IfcMassPerLengthMeasure((MeasureResource.IfcMassPerLengthMeasure)member);
			if (member is MeasureResource.IfcModulusOfLinearSubgradeReactionMeasure) 
				return new Ifc4.MeasureResource.IfcModulusOfLinearSubgradeReactionMeasure((MeasureResource.IfcModulusOfLinearSubgradeReactionMeasure)member);
			if (member is MeasureResource.IfcModulusOfRotationalSubgradeReactionMeasure) 
				return new Ifc4.MeasureResource.IfcModulusOfRotationalSubgradeReactionMeasure((MeasureResource.IfcModulusOfRotationalSubgradeReactionMeasure)member);
			if (member is MeasureResource.IfcRotationalMassMeasure) 
				return new Ifc4.MeasureResource.IfcRotationalMassMeasure((MeasureResource.IfcRotationalMassMeasure)member);
			if (member is MeasureResource.IfcSectionalAreaIntegralMeasure) 
				return new Ifc4.MeasureResource.IfcSectionalAreaIntegralMeasure((MeasureResource.IfcSectionalAreaIntegralMeasure)member);
			if (member is MeasureResource.IfcSectionModulusMeasure) 
				return new Ifc4.MeasureResource.IfcSectionModulusMeasure((MeasureResource.IfcSectionModulusMeasure)member);
			if (member is MeasureResource.IfcTemperatureGradientMeasure) 
				return new Ifc4.MeasureResource.IfcTemperatureGradientMeasure((MeasureResource.IfcTemperatureGradientMeasure)member);
			if (member is MeasureResource.IfcThermalExpansionCoefficientMeasure) 
				return new Ifc4.MeasureResource.IfcThermalExpansionCoefficientMeasure((MeasureResource.IfcThermalExpansionCoefficientMeasure)member);
			if (member is MeasureResource.IfcWarpingConstantMeasure) 
				return new Ifc4.MeasureResource.IfcWarpingConstantMeasure((MeasureResource.IfcWarpingConstantMeasure)member);
			if (member is MeasureResource.IfcWarpingMomentMeasure) 
				return new Ifc4.MeasureResource.IfcWarpingMomentMeasure((MeasureResource.IfcWarpingMomentMeasure)member);
			if (member is MeasureResource.IfcSoundPowerMeasure) 
				return new Ifc4.MeasureResource.IfcSoundPowerMeasure((MeasureResource.IfcSoundPowerMeasure)member);
			if (member is MeasureResource.IfcSoundPressureMeasure) 
				return new Ifc4.MeasureResource.IfcSoundPressureMeasure((MeasureResource.IfcSoundPressureMeasure)member);
			if (member is MeasureResource.IfcHeatingValueMeasure) 
				return new Ifc4.MeasureResource.IfcHeatingValueMeasure((MeasureResource.IfcHeatingValueMeasure)member);
			if (member is MeasureResource.IfcPHMeasure) 
				return new Ifc4.MeasureResource.IfcPHMeasure((MeasureResource.IfcPHMeasure)member);
			if (member is MeasureResource.IfcIonConcentrationMeasure) 
				return new Ifc4.MeasureResource.IfcIonConcentrationMeasure((MeasureResource.IfcIonConcentrationMeasure)member);
			throw new System.NotSupportedException();
		}

		//transformation function to convert/cast IFC4 data to appear as IFC2x3 if possible
		private MeasureResource.IfcValue ListValuesToIfc2x3 (IIfcValue member){
			throw new System.NotImplementedException();
		}
	//## Custom code
	//##
	}
}