// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Interfaces;
using System.Collections.Generic;
using System.Linq;

// ReSharper disable once CheckNamespace
namespace Xbim.Ifc2x3.PropertyResource
{
	public partial class @IfcProperty : IIfcProperty
	{
		Ifc4.MeasureResource.IfcIdentifier IIfcProperty.Name 
		{ 
			get
			{
				return new Ifc4.MeasureResource.IfcIdentifier(Name);
			} 
		}
		Ifc4.MeasureResource.IfcText? IIfcProperty.Description 
		{ 
			get
			{
				if (!Description.HasValue) return null;
				return new Ifc4.MeasureResource.IfcText(Description.Value);
			} 
		}
		IEnumerable<IIfcPropertySet> IIfcProperty.PartOfPset 
		{ 
			get
			{
				return Model.Instances.Where<IIfcPropertySet>(e => e.HasProperties != null &&  e.HasProperties.Contains(this));
			} 
		}
		IEnumerable<IIfcPropertyDependencyRelationship> IIfcProperty.PropertyForDependance 
		{ 
			get
			{
				return Model.Instances.Where<IIfcPropertyDependencyRelationship>(e => (e.DependingProperty as IfcProperty) == this);
			} 
		}
		IEnumerable<IIfcPropertyDependencyRelationship> IIfcProperty.PropertyDependsOn 
		{ 
			get
			{
				return Model.Instances.Where<IIfcPropertyDependencyRelationship>(e => (e.DependantProperty as IfcProperty) == this);
			} 
		}
		IEnumerable<IIfcComplexProperty> IIfcProperty.PartOfComplex 
		{ 
			get
			{
				return Model.Instances.Where<IIfcComplexProperty>(e => e.HasProperties != null &&  e.HasProperties.Contains(this));
			} 
		}
		IEnumerable<IIfcExternalReferenceRelationship> IIfcPropertyAbstraction.HasExternalReferences 
		{ 
			get
			{
				return Model.Instances.Where<IIfcExternalReferenceRelationship>(e => e.RelatedResourceObjects != null &&  e.RelatedResourceObjects.Contains(this));
			} 
		}
	}
}