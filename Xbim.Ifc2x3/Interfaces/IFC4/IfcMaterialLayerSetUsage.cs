// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Interfaces;
using System.Collections.Generic;
using System.Linq;

// ReSharper disable once CheckNamespace
namespace Xbim.Ifc2x3.MaterialResource
{
	public partial class @IfcMaterialLayerSetUsage : IIfcMaterialLayerSetUsage
	{
		IIfcMaterialLayerSet IIfcMaterialLayerSetUsage.ForLayerSet 
		{ 
			get
			{
				return ForLayerSet as IIfcMaterialLayerSet;
			} 
		}
		Xbim.Ifc4.MaterialResource.IfcLayerSetDirectionEnum IIfcMaterialLayerSetUsage.LayerSetDirection 
		{ 
			get
			{
				switch (LayerSetDirection)
				{
					case Xbim.Ifc2x3.MaterialResource.IfcLayerSetDirectionEnum.AXIS1:
						return Xbim.Ifc4.MaterialResource.IfcLayerSetDirectionEnum.AXIS1;
					
					case Xbim.Ifc2x3.MaterialResource.IfcLayerSetDirectionEnum.AXIS2:
						return Xbim.Ifc4.MaterialResource.IfcLayerSetDirectionEnum.AXIS2;
					
					case Xbim.Ifc2x3.MaterialResource.IfcLayerSetDirectionEnum.AXIS3:
						return Xbim.Ifc4.MaterialResource.IfcLayerSetDirectionEnum.AXIS3;
					
					
					default:
						throw new System.ArgumentOutOfRangeException();
				}
			} 
		}
		Xbim.Ifc4.MaterialResource.IfcDirectionSenseEnum IIfcMaterialLayerSetUsage.DirectionSense 
		{ 
			get
			{
				switch (DirectionSense)
				{
					case Xbim.Ifc2x3.MaterialResource.IfcDirectionSenseEnum.POSITIVE:
						return Xbim.Ifc4.MaterialResource.IfcDirectionSenseEnum.POSITIVE;
					
					case Xbim.Ifc2x3.MaterialResource.IfcDirectionSenseEnum.NEGATIVE:
						return Xbim.Ifc4.MaterialResource.IfcDirectionSenseEnum.NEGATIVE;
					
					
					default:
						throw new System.ArgumentOutOfRangeException();
				}
			} 
		}
		Xbim.Ifc4.MeasureResource.IfcLengthMeasure IIfcMaterialLayerSetUsage.OffsetFromReferenceLine 
		{ 
			get
			{
				return new Xbim.Ifc4.MeasureResource.IfcLengthMeasure((double)OffsetFromReferenceLine);
			} 
		}
		Xbim.Ifc4.MeasureResource.IfcPositiveLengthMeasure? IIfcMaterialLayerSetUsage.ReferenceExtent 
		{ 
			get
			{
				//TODO: Handle return of ReferenceExtent for which no match was found
				throw new System.NotImplementedException();
			} 
		}
		IEnumerable<IIfcRelAssociatesMaterial> IIfcMaterialUsageDefinition.AssociatedTo 
		{ 
			get
			{
				return Model.Instances.Where<IIfcRelAssociatesMaterial>(e => (e.RelatingMaterial as IfcMaterialLayerSetUsage) == this);
			} 
		}
	}
}